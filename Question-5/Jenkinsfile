pipeline {
    agent any

    environment {
        REPO_URL = 'http://github.com/akshaykumart'
        DOCKER_IMAGE = "myapp"
        KUBE_CONFIG = credentials('kubeconfig')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'github-credentials', url: "${REPO_URL}", branch: 'main'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t $DOCKER_IMAGE .
                docker tag $DOCKER_IMAGE akshaykumart/myapp:latest
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: 'docker-hub', url: 'https://index.docker.io/v1/']) {
                    sh "docker push akshaykumart/myapp:latest"
                }
            }
        }

        stage('Deploy to Dev') {
            steps {
                sh """
                kubectl --kubeconfig=$KUBE_CONFIG apply -f kubernetess/dev/deployment.yaml
                """
            }
        }

        stage('Smoke Test - Dev') {
            steps {
                sh "curl -f http://dev.myapp.com/health || exit 1"
            }
        }

        stage('Deploy to Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                sh """
                kubectl --kubeconfig=$KUBE_CONFIG apply -f kubernetess/test/deployment.yaml
                """
            }
        }

        stage('Integration Test - Staging') {
            steps {
                sh "curl -f http://test.myapp.com/health || exit 1"
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh """
                kubectl --kubeconfig=$KUBE_CONFIG apply -f kubernetess/prod/deployment.yaml
                """
            }
        }

        stage('Verify Prod Deployment') {
            steps {
                sh "curl -f http://prod.myapp.com/health || exit 1"
            }
        }

        stage('Rollback on Failure') {
            when {
                failure()
            }
            steps {
                sh """
                kubectl --kubeconfig=$KUBE_CONFIG rollout undo deployment myapp -n prod
                """
            }
        }
    }
}
